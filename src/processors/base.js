/**
 * A PageProcessor is an abstraction of want needs to happen to a page after it
 * has been fetched.
 * 
 * The arguments passed to the constructor depend on the Driver using it.
 * 
 * @class PageProcessor
 */
var PageProcessor = module.exports = function PageProcessor() {
  if (this.constructor === PageProcessor) {
    throw new Error("Cannot instantiate PageProcessor base class.");
  }
};


/**
 * Extends the objects generated by the given constructor to be sub-classes
 * of PageProcessor.
 * 
 * @param {!Function} constructor The constructor for the class to extend.
 */
PageProcessor.extendConstructor = function(constructor) {
  constructor.prototype = Object.create(PageProcessor.prototype);
  constructor.prototype.constructor = constructor;
};


/**
 * The method that performs the actual processing of the page.
 * 
 * The arguments to this method depends on the Driver just as for the
 * constructor but, unlike the constructor, they should try to be as close
 * as possible to this definition.
 * 
 * @param {!Page} page The Page instance to process.
 * @returns {!Q.Promise} A promise that resolves when the processing is done.
 */
PageProcessor.prototype.process = function(page) {
  throw new Error("Abstract method not implemented.");
};
